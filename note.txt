--------------------------------------------
task

ﾀｸﾞごとの正答率

解説に引用できるメモ機能の追加

新規の問題登録作成

入力欄のﾃﾞｻﾞｲﾝ修正
ﾛｸﾞｲﾝ画面のﾃﾞｻﾞｲﾝ修正
新規ﾕｰｻﾞ登録の作成

templateの継承
	-base.htmlで基本形を作る
回答結果から問題ﾀｸﾞの変更
	-ｸﾘｯｸ・ﾀｯﾌﾟで変更可能に
正答率の二択・短答の分離
	-judge青、短答オレンジ
DBのｺﾋﾟｰ・ﾀﾞｳﾝﾛｰﾄﾞ
	-"/download"からdatabasefileをダウンロード
--------------------------------------------
--------------------------------------------

ﾃﾞｰﾀﾍﾞｰｽの構成

table:"users"
(name:str,pass:str)

table:"Score"
(datetime:datetime,user:str,mode:str,ID:int,chara:str,result:1or0)

table:"common"
(IDlist_J:picklelist,IDlist_P:picklelist)
IDlist_J:[int,int...]
IDlist_P:[int,int...]

table:"Question_J"
(ID:int, about:pickle&list, name:str, Q:str, A:pickle&taple, C:str)
about:[str,str,...]
tag  :[str,str,...]
A    :(("answer","〇"),("badanswer","×"),)

table:"Question_P"
(ID:int, about:pickle&list, name:str, Q:str, C:str)

table:"Question_P_v"
(ID:int,chara:str,answer:str)

table:"Question_J_tag"
(QID:int,tagID:int)

table:"Question_P_tag"
(QID:int,tagID:int)

table:"tag"
(ID:int,name:str)

table:"note"
(ID:str,name:str,content:str)

table:"note_tag"
(NID:str,tagID:int)
--------------------------------------------

--------------------------------------------
メモとタグの達成率を概算で求める

各問題の正誤を記録するscoreのテーブルの他に、もう一つscoreに関するテーブルを作る
また、タグ、メモのテーブルには要素数のカラムを増やす

newscore:
ユーザー名
タグかノートかのtype
タグかノートかのid
得点(0から1000の間で推移)
最終回答時のタグ・ノートの属する問題数

→Progress       : user, type, id, point, qcount


問題に答えた時、レコードがない
	対応するタグ・ノートについてレコードを作成
	pointの初期値は問題の直近の回答10の正答数

問題に答えた時、レコードがある
	対応タグ・ノートのレコードの得点から得点の1/100切り捨てを引き、直近10の正答数を追加
	問題数の変更をチェックして、増加があれば、""(1/100切り捨て)を得点から引く*増分""
	減少ならなにもしない。最後に回答時の問題数を更新

	(1/100切り捨て)を得点から引く*増分は手間かかるので、
	得点 = int(得点*(更新前/(更新前+更新後))) で計算する

	例えば元が50問あって50問追加したら、得点は半分にする
	追加量が少ないときは、変更がほぼないがOK

問題追加時
	属するタグ・メモの要素数を増加する
問題変更時
	属するタグ・メモの要素数を変更
問題削除時
	属するタグ・メモの要素数を減少
タグ削除時
	progressのテーブルから該当するIDのレコードを削除する

ノートの

各メモ・タグの概算達成は得点/1000で算出する
問題の追加による変更は計算しやすいが、削除の変更ははやりにくい...
とはいえ、大幅削除は少ないはずなので変更なしでもよしとする。
同じ問題だけ解いててもスコアは伸びるが、考慮はしない。
まったくの初期状態でも大体300問ぐらい解けば正答率に近づく
--------------------------------------------

--------------------------------------------
endpoint : static
methods  : ['HEAD', 'GET', 'OPTIONS']
url      : /static/<path:filename>

endpoint : add_J
methods  : ['POST', 'OPTIONS']
url      : /add_J

endpoint : add_P
methods  : ['POST', 'OPTIONS']
url      : /add_P

endpoint : check_J
methods  : ['POST', 'OPTIONS']
url      : /check_J

endpoint : check_P
methods  : ['POST', 'HEAD', 'GET', 'OPTIONS']
url      : /check_P

endpoint : home
methods  : ['HEAD', 'GET', 'OPTIONS']
url      : /home

endpoint : infiniteQ_Judge
methods  : ['HEAD', 'GET', 'OPTIONS']
url      : /infiniteQ_Judge

endpoint : infiniteQ_Phrase
methods  : ['HEAD', 'GET', 'OPTIONS']
url      : /infiniteQ_Phrase

endpoint : set_search
methods  : ['POST', 'OPTIONS']
url      : /set_search/<ID>

endpoint : tagchange
methods  : ['HEAD', 'GET', 'OPTIONS']
url      : /tagchange/<word>

endpoint : auth.login
methods  : ['POST', 'HEAD', 'GET', 'OPTIONS']
url      : /auth/login

endpoint : auth.logout
methods  : ['HEAD', 'GET', 'OPTIONS']
url      : /auth/logout

endpoint : edit.judge
methods  : ['POST', 'HEAD', 'GET', 'OPTIONS']
url      : /edit/judge/<ID>

endpoint : edit.phrase
methods  : ['POST', 'HEAD', 'GET', 'OPTIONS']
url      : /edit/phrase/<ID>

endpoint : download
methods  : ['HEAD', 'GET', 'OPTIONS']
url      : /download

endpoint : routes
methods  : ['HEAD', 'GET', 'OPTIONS']
url      : /routes

--------------------------------------------

